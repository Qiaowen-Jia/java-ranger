target=tcgbenchmarks.runconfig.TestCasePerf
classpath=${jpf-symbc}/build/examples
sourcepath=${jpf-symbc}/src/examples
vm.storage.class=nil
symbolic.debug=false

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.singleBranchCov2(sym#sym)

symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.doubleBranchCov(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.complexBranchCov(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.unoptimalDFS(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.doubleLoopUnoptimalDFS(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.doubleLoop(sym#sym)


#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.doubleRec(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.singleBranchCov2(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.mixOfRegions(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.mixOfRegions2Paths(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.mixOfRegions2Paths2(sym#sym)


#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.mixOfRegions2Paths2ComplexCond(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.mixOfRegions2PathsDepth3(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.arrayLoadStore0(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.testingSoundReach(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.testingComplexConditions1(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.testingComplexConditions2(sym#sym)


#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.testingComplexConditions3(sym#sym#sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.testERInline(sym#sym)

#symbolic.method=tcgbenchmarks.runconfig.TestCasePerf.simpleRegion(sym)


jvm.insn_factory.class=gov.nasa.jpf.symbc.BranchSymInstructionFactory

#symbolic.dp=z3

symbolic.dp=z3bitvectorinc
#symbolic.dp=z3inc

#listener =.symbc.VeritestingListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener

## branch coverage with unit test for JR
listener =.symbc.VeritestingListener,.symbc.VeriBranchListener,gov.nasa.jpf.symbc.sequences.VeriSymbolicSequenceListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener

## branch execution for plain SPF with guiding and pruning features
#listener =.symbc.BranchListener,gov.nasa.jpf.symbc.sequences.ThreadSymbolicSequenceListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener


## plain spf path exploration with unit tests, no guiding or pruning or coverage, just test cases
#listener =.symbc.SymbolicListener,gov.nasa.jpf.symbc.sequences.ThreadSymbolicSequenceListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener

#listener =.symbc.SymbolicListener
targetAbsPath=${jpf-symbc}/build/examples/tcgbenchmarks/runconfig

coverageMode=5
veritestingMode=3

# must be added to avoid redundant constraints on the path condition.
performanceMode=true